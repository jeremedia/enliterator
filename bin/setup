#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  puts "\n== Setting up environment =="
  unless File.exist?(".env")
    if File.exist?(".env.example")
      FileUtils.cp ".env.example", ".env"
      puts "Created .env file from .env.example"
      puts "Please update .env with your OpenAI API key and other credentials"
    end
  end

  puts "\n== Starting Docker services =="
  if system("docker compose version", out: File::NULL, err: File::NULL)
    system! "docker compose up -d"
    
    # Wait for services to be ready
    puts "\n== Waiting for services to be ready =="
    sleep 5
    
    # Check PostgreSQL
    retries = 0
    until system("docker compose exec -T postgres pg_isready -U enliterator", out: File::NULL, err: File::NULL) || retries > 30
      print "."
      sleep 1
      retries += 1
    end
    puts " PostgreSQL ready!"
    
    # Check Neo4j
    retries = 0
    until system("curl -f http://localhost:7474", out: File::NULL, err: File::NULL) || retries > 30
      print "."
      sleep 1
      retries += 1
    end
    puts " Neo4j ready!"
  else
    puts "Docker Compose not found. Please install Docker and Docker Compose."
    puts "Services must be started manually."
  end

  puts "\n== Preparing databases =="
  system! "bin/rails db:create"
  system! "bin/rails db:migrate"
  
  # Create cache, queue, and cable databases
  system! "bin/rails db:create:all"
  
  # Run cache schema
  system! "bin/rails db:schema:load:cache"
  
  # Run queue schema
  system! "bin/rails db:schema:load:queue"
  
  # Run cable schema
  system! "bin/rails db:schema:load:cable"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"
  
  puts "\n== Creating required directories =="
  FileUtils.mkdir_p "tmp/storage"
  FileUtils.mkdir_p "storage"
  FileUtils.mkdir_p "log"

  puts "\n== Running asset compilation =="
  system! "bin/rails assets:precompile"

  puts "\n== Setup complete! =="
  puts "\nNext steps:"
  puts "1. Update your .env file with your OpenAI API key"
  puts "2. Run 'bin/dev' to start the development server"
  puts "3. Visit http://localhost:3000"
  
  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end