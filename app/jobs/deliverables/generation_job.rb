# frozen_string_literal: true

# PURPOSE: Stage 8 of the 9-stage pipeline - Autogenerated Deliverables
# Generates prompt packs, evaluation bundles, and reports
#
# Inputs: Scored and gap-analyzed dataset
# Outputs: Deliverable artifacts

module Deliverables
  class GenerationJob < Pipeline::BaseJob
    queue_as :pipeline
    
    def perform(pipeline_run_id)
      # BaseJob sets up @pipeline_run, @batch, @ekn via around_perform
      # Do NOT call super - BaseJob uses around_perform to wrap this method
      
      log_progress "Starting deliverables generation"
      
      @deliverables = []
      
      begin
        # Generate prompt pack
        generate_prompt_pack
        
        # Generate evaluation bundle
        generate_evaluation_bundle
        
        # Generate summary report
        generate_summary_report
        
        log_progress "âœ… Deliverables generated: #{@deliverables.size} artifacts"
        
        # Track metrics
        track_metric :deliverables_generated, @deliverables.size
        
        # Update batch status
        @batch.update!(
          status: 'completed',
          deliverables: @deliverables
        )
        
      rescue => e
        log_progress "Deliverables generation failed: #{e.message}", level: :error
        raise
      end
    end
    
    private
    
    def generate_prompt_pack
      prompt_pack = {
        type: 'prompt_pack',
        generated_at: Time.current,
        prompts: [
          "Tell me about the main ideas in this dataset",
          "What are the key relationships?",
          "Show me the evolution over time"
        ]
      }
      
      @deliverables << prompt_pack
      log_progress "Generated prompt pack", level: :debug
    end
    
    def generate_evaluation_bundle
      eval_bundle = {
        type: 'evaluation_bundle',
        generated_at: Time.current,
        metrics: {
          total_entities: 100, # Simplified
          total_relations: 50,  # Simplified
          literacy_score: @batch.literacy_score || 0
        }
      }
      
      @deliverables << eval_bundle
      log_progress "Generated evaluation bundle", level: :debug
    end
    
    def generate_summary_report
      report = {
        type: 'summary_report',
        generated_at: Time.current,
        summary: "Dataset processed successfully through 8 stages"
      }
      
      @deliverables << report
      log_progress "Generated summary report", level: :debug
    end
    
    def collect_stage_metrics
      {
        deliverables_generated: @metrics[:deliverables_generated] || 0
      }
    end
  end
end
